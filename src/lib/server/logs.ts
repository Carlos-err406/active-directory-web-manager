import getConfig from '$config';
import dayjs from 'dayjs';
import path from 'path';
import { log } from 'sveltekit-logger-hook';
import { v4 } from 'uuid';

type ErrorLogOpts = {
	/**force an error id in the log, else it will be autogenerated */
	errorId?: string;
	/**message to show, generally descriptive */
	message?: string;
	/**force an error name to show, else errorId will be used */
	errorName?: string;
};

export const errorLog = async (e: unknown, extra?: ErrorLogOpts) => {
	const config = await getConfig();
	const errorId = extra?.errorId ?? v4();
	if (!config.system.logging.useLogging) return errorId;
	const message = extra?.message ?? 'No error description';
	const errorName = extra?.errorName ?? errorId;

	delete extra?.errorName;
	delete extra?.errorId;

	log(
		{ errorId, error: `${e}`, ...extra },
		{
			basePath: path.join(config.system.logging.basePath, 'system')
		}
	);
	await appLog(`(${errorName || errorId}) ` + message, 'Error');

	return errorId;
};
export const appLog = async (line: string, type: 'Info' | 'Warning' | 'Error' = 'Info') => {
	const config = await getConfig();
	if (!config.system.logging.useLogging) return;
	log(`${dayjs().format('YYYY-MM-DD HH:mm:ss A')} -- [${type}]: ${line}`, {
		basePath: path.join(config.system.logging.basePath, 'app')
	});
};
